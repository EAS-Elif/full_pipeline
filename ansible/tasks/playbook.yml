---
# tasks file for ansible
# - hosts: jenkins
#   become_user: root
#   become: true
#   tasks:
  
#     - name: Download Repo file
#       ansible.builtin.get_url: 
#         url: https://pkg.jenkins.io/redhat-stable/jenkins.repo
#         dest: /etc/yum.repos.d/jenkins.repo

#     - name: Download key
#       ansible.builtin.rpm_key: 
#         key: https://pkg.jenkins.io/redhat-stable/jenkins.io-2023.key 
#         state: present

#     - name: Install jenkins, java, docker
#       yum:
#        name:
#        - java-11-openjdk
#        - jenkins
#        - docker
#        - git
#        state: present

#     - name: Disable firewalld
#       ansible.builtin.service:
#         name: firewalld
#         state: stopped
#         enabled: False

#     - name: Start service
#       ansible.builtin.service:
#        name: jenkins 
#        state: started

#     - name: Make sure a service unit is running
#       ansible.builtin.systemd:
#        state: started
#        name: jenkins

#     - name: Using shell module to get the password
#       ansible.builtin.shell: cat /var/lib/jenkins/secrets/initialAdminPassword
#       register: jenkins_password

#     - name: Install configuration-as-code plugin 
#       jenkins_plugin:
#         name: "{{ item }}"
#         url_username: admin
#         url_password: "{{jenkins_password.stdout}}"
#         url: http://localhost:8080
#       loop:
#       - configuration-as-code
#       - job-dsl-plugin
#       - github-plugin
#       - sonar

# - hosts: sonarqube
#   tasks:
#     - name: Install tools
#       yum: 
#        name:
#        - vim
#        - wget
#        - curl
#        - unzip
#        - java-11-openjdk
#        state: present

#     - name: Create a group as sonar
#       ansible.builtin.group:
#         name: sonar

#     - name: Add the sonar user with directory access
#       ansible.builtin.user:
#         group: sonar
#         name: sonar
#         home: /opt/sonarqube
        
      
#     - name: Download sonarqube
#       ansible.builtin.get_url:
#         url: https://binaries.sonarsource.com/Distribution/sonarqube/sonarqube-9.1.0.47736.zip
#         dest: /tmp/

#     - name: Unzip sonarqube
#       ansible.builtin.unarchive:
#         src: /tmp/sonarqube-9.1.0.47736.zip
#         dest: /opt/
#         remote_src: yes

#     - name: Create a directory 
#       ansible.builtin.file: 
#         path: /opt/sonarqube/
#         state: directory
#         mode: '0755'

#     - name: Copy extracted set up
#       ansible.builtin.copy:
#         src: /opt/sonarqube-9.1.0.47736/
#         dest: /opt/sonarqube/
#         owner: sonar
#         group: sonar
#         mode: '0644'
#         remote_src: yes

#     - name: Edit the sonar.properties file
#       ansible.builtin.lineinfile:
#         path: /opt/sonarqube/conf/sonar.properties
#         regexp: '^#sonar.web.host='
#         line: 'sonar.web.host={{ ansible_host }}'
        
#     - name: Edit the sonar.properties file
#       ansible.builtin.lineinfile:
#         path: /opt/sonarqube/conf/sonar.properties
#         regexp: '^#sonar.web.port=9000'
#         line: 'sonar.web.port=9000'
        
#     - name: Edit the sonar script
#       ansible.builtin.lineinfile: 
#         path: /opt/sonarqube/bin/linux-x86-64/sonar.sh
#         regexp: '^#RUN_AS_USER='
#         line: 'RUN_AS_USER=sonar'

#     - name: Give permission
#       ansible.builtin.shell:
#         chdir: /opt/sonarqube
#         cmd: chown -R sonar:sonar /opt/sonarqube

#     - name: Give permission
#       ansible.builtin.shell:
#         chdir: /opt/sonarqube
#         cmd: chmod -R 0777 /opt/sonarqube
    
#     - name: Copy file
#       ansible.builtin.copy: 
#         src: ./sonar.service
#         dest: /etc/systemd/system/sonar.service
#         owner: sonar
#         group: sonar
#         mode: '0644'

#     - name: Disable firewalld
#       ansible.builtin.service:
#         name: firewalld
#         state: stopped
#         enabled: False

#     - name: Start service
#       ansible.builtin.service:
#         name: sonar.service
#         state: started
    
#     - name: Enable service
#       ansible.builtin.service:
#         name: sonar.service
#         enabled: yes
      
#     - name: Make sure a service unit is running
#       ansible.builtin.systemd:
#         enabled: true
#         name: sonar
#         masked: no

- hosts: nexus
  tasks:
    - name: Install tools
      yum: 
       name:
       - vim
       - wget
       - unzip
       - java-1.8.0-openjdk
       - java-1.8.0-openjdk-devel
       state: present
    
    - name: Create a group as nexus
      ansible.builtin.group:
        name: nexus

    - name: Create Nexus user
      ansible.builtin.user:
        name: nexus
        group: nexus
        home: /opt/nexus
        system: yes
        shell: /bin/nologin
        createhome: no

    - name: Create a directory 
      ansible.builtin.file: 
        path: /opt/nexusdata
        state: directory
        mode: '0755'

    - name: Create a directory 
      ansible.builtin.file: 
        path: /opt/nexus
        state: directory
        mode: '0755'
  
    - name: Download latest nexus artifact
      ansible.builtin.get_url:
        url: http://download.sonatype.com/nexus/3/latest-unix.tar.gz
        dest: /tmp/nexus.tar.gz

    - name: Extract it to /opt/nexus
      ansible.builtin.unarchive:
        src: /tmp/nexus.tar.gz
        dest: /opt/nexus
        remote_src: yes
        
    - name: Edit the nexus.rc
      ansible.builtin.lineinfile: 
        path: /opt/nexus/nexus-3.56.0-01/bin/nexus.rc
        regexp: '^#RUN_AS_USER='
        line: 'RUN_AS_USER="nexus"'
      
    - name: Edit the nexus properties file
      ansible.builtin.lineinfile:
        path: /opt/nexus/nexus-3.56.0-01/etc/nexus-default.properties
        regexp: '^#nexus.web.host='
        line: 'nexus.web.host={{ ansible_host }}'
        
    - name: Edit the nexus properties file
      ansible.builtin.lineinfile:
        path: /opt/nexus/nexus-3.56.0-01/etc/nexus-default.properties
        regexp: '^#nexus.web.port=8081'
        line: 'nexus.web.port=8081'

    - name: Give permission
      ansible.builtin.shell:
        chdir: /opt/nexus
        cmd: chown -R nexus:nexus /opt/nexus

    - name: Give permission
      ansible.builtin.shell:
        chdir: /opt/nexusdata
        cmd: chmod -R 0777 /opt/nexusdata
    
    - name: Give permission
      ansible.builtin.shell:
        chdir: /opt/nexus
        cmd: chown -R nexus:nexus /opt/nexusdata

    - name: Give permission
      ansible.builtin.shell:
        chdir: /opt/nexus
        cmd: chmod -R 0777 /opt/nexus

    - name: Copy file
      ansible.builtin.copy: 
        src: ./nexus.service
        dest: /etc/systemd/system/nexus.service

    - name: Disable firewalld
      ansible.builtin.service:
        name: firewalld
        state: stopped
        enabled: False   

    - name: Enable service
      ansible.builtin.service:
        name: nexus.service
        enabled: yes
        masked: no
        daemon_reload: true

    - name: Start service
      ansible.builtin.service:
        name: nexus.service
        state: restarted


    - name: Create Nexus Local User
      uri:
        url: "{{ nexus_url }}/service/rest/v1/security/users"
        method: POST
        user: "{{ nexus_username }}"
        password: "{{ nexus_password }}"
        body_format: json
        body: |
          {
            "userId": "{{ user_id }}",
            "firstName": "{{ user_id }}",
            "lastName": "User",
            "emailAddress": "{{ user_id }}@example.com",
            "password": "{{ user_password }}",
            "status": "active"
          }
      register: user_creation_result
     

    - name: Create Nexus Role
      uri:
        url: "{{ nexus_url }}/service/rest/v1/security/roles"
        method: POST
        user: "{{ nexus_username }}"
        password: "{{ nexus_password }}"
        body_format: json
        body: |
          {
            "id": "{{ role_id }}",
            "name": "{{ role_name }}",
            "privileges": {{ role_privileges | to_json }}
          }
       
      register: role_creation_result


    - name: Assign Role to User
      uri:
        url: "{{ nexus_url }}/service/rest/v1/security/users/{{ user_id }}/roles"
        method: PUT
        user: "{{ nexus_username }}"
        password: "{{ nexus_password }}"
        body_format: json
        body: |
          {
            "source": "default",
            "roles": [
              {
                "id": "{{ role_id }}"
              }
            ]
          }
      when: user_creation_result.status == 201 or user_check_result.status == 200



   



       
      
      




    
        
      
        
    
     
    
      


    
        



     

